def stagestatus = [:]


pipeline {
  triggers { pollSCM 'H * * * 1-5' }
  environment {
    credential = 'voyager1122'
    image_app = "voyager1122/modx"
    registry = "registry.hub.docker.com"
  }
  
  agent any
  
  stages {
    stage('Cloning Git') {
      steps {
        git url: 'https://github.com/voyager1122/modx.git', branch: 'main', credentialsId: "jenkins_git"
      }
    }
    
    stage('Building image') {
      steps{
        script {
          try {
            dockerImage = docker.build (image_app + ":$BUILD_NUMBER" , "./modx-app/")
            stagestatus.Docker_BUILD = "Success"
          } catch (Exception err) {
            stagestatus.Docker_BUILD = "Failure"
            error "Something wrong with Dockerfile"
          }
        }
      }
    }
    
    stage('Push APP image to DockerHub') {
      steps{
        script {
          catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            try {
              docker.withRegistry('', 'docker_hub') {
              dockerImage.push("${env.BUILD_ID}")
            }
              stagestatus.Docker_PUSH = "Success"
            } catch (Exception err) {
              stagestatus.Docker_PUSH = "Failure"
              error "APP image pushing error"
              }
          }
        }
      }
    }
    
    
    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $image_app:$BUILD_NUMBER"
      }
    }
    
    stage('Testing YAML syntax') {
        steps {
          script {
            catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              try {
                sh 'kubeval --strict --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/ ./modx-app/modx_deployment.yaml > kubeval.log'
                archiveArtifacts artifacts: 'kubeval.log'
                stagestatus.Kubeval = "Success"
              } catch (Exception err) {
                stagestatus.Kubeval = "Failure"
                error "Yaml syntax is incorrect"
              }
            }
          }
        }
    }    
     
	  
    stage('Deploy/Upgrade in K8s') {
        when { 
          allOf {
            expression { stagestatus.find{ it.key == "Docker_PUSH" }?.value == "Success" }
            expression { stagestatus.find{ it.key == "Kubeval" }?.value == "Success" }
          }
        }  
        steps {
          script {
            catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              try {
                
                
                if (sh(returnStdout: true, script: 'kubectl get deployment modx --ignore-not-found --namespace default') == '') {
                  sh """
                      sed -i "s|270|${env.BUILD_ID}|g" ./modx-app/modx_deployment.yaml
                      kubectl apply -f ./modx-app/modx_deployment.yaml --namespace=default
                    """
                }
                else { 
                sh "kubectl scale --replicas=0 deployment/modx --namespace default"
                sh "kubectl delete -l name=modx-web-pv-claim -f ./modx-app/modx_deployment.yaml --namespace default"
                sh "kubectl apply -l name=modx-web-pv-claim -f ./modx-app/modx_deployment.yaml --namespace default"
                sh "kubectl set image deployment/modx modx=$image_app:${env.BUILD_ID} --namespace default"
                sh "kubectl scale --replicas=1 deployment/modx --namespace default"
                stagestatus.Deploy = "Success"
                }
              } catch (Exception err) {
                stagestatus.Deploy = "Failure"
                error "Deploy failed"
              }
            }
          }
        }
    }
	  
    stage("Rollback if deployment failed") {
      when { expression { stagestatus.find{ it.key == "Deploy" }?.value == "Failure" } }
      steps {
        script {
          sh "kubectl scale --replicas=0 deployment/modx --namespace default"
          sh "kubectl delete -l name=modx-web-pv-claim -f ./modx-app/modx_deployment.yaml --namespace default"
          sh "kubectl apply -l name=modx-web-pv-claim -f ./modx-app/modx_deployment.yaml --namespace default"
          sh "kubectl rollout undo deployment/modx --namespace default"
          sh "kubectl scale --replicas=1 deployment/modx --namespace default"
        }
      }
    }  
    
  }
  post {
            success {
                slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'")
            }
            failure {
                slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'")
            }
    }
}